{
	"name": "PGP Encryption from Vault",
	"properties": {
		"folder": {
			"name": "Custom"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolpoc",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ba11d16c-a12d-4192-98b4-445c01759e20"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c1ec8fd6-1910-4c4f-bc4b-0484bd45f5e6/resourceGroups/dev-synapse/providers/Microsoft.Synapse/workspaces/synapse-poc-demo/bigDataPools/sparkpoolpoc",
				"name": "sparkpoolpoc",
				"type": "Spark",
				"endpoint": "https://synapse-poc-demo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolpoc",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 5,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# PGP Encryption from Vault\n",
					"\n",
					"Note: a lot of this was generated by Github Copilot. Review generation for accuracies."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Create Key\n",
					"\n",
					"Make sure to install the right package:"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%pip install azure-keyvault-secrets==4.8.0\n",
					"%pip install azure-identity==1.16.0"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%pip install python-gnupg==0.5.2"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"import gnupg\n",
					"\n",
					"# Initialize GPG\n",
					"gpg = gnupg.GPG()\n",
					"\n",
					"# Define key parameters\n",
					"input_data = gpg.gen_key_input(\n",
					"    name_email='marcin@selecthealth.com',\n",
					"    passphrase='not$uper$trong',  # Use a strong passphrase\n",
					"    key_type='RSA',\n",
					"    key_length=2048\n",
					")\n",
					"\n",
					"# Generate the key\n",
					"key = gpg.gen_key(input_data)\n",
					"\n",
					"# Export the public key\n",
					"public_key = gpg.export_keys(key.fingerprint)\n",
					"\n",
					"# Export the private key\n",
					"private_key = gpg.export_keys(key.fingerprint, True, passphrase='not$uper$trong')\n",
					"\n",
					"# Save the keys to files\n",
					"with open('public_key.asc', 'w') as f:\n",
					"    f.write(public_key)\n",
					"\n",
					"with open('private_key.asc', 'w') as f:\n",
					"    f.write(private_key)\n",
					"\n",
					"print(\"PGP key pair generated and saved to 'public_key.asc' and 'private_key.asc'.\")"
				],
				"execution_count": 52
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Copy the Key to Vault\n",
					"\n",
					"Take the key output and copy it to the vault. We will save it as `pgp-public-key`. **This step is not done as part of this notebook.**\n",
					"\n",
					"When using vault, be sure to add an IAM role to the user adding key for the vault instance."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(public_key.replace('\\n', ''))"
				],
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Encrypt Data\n",
					"\n",
					"Below is running the notebook as a managed identity, which is similar to how pipelines would be run. Assign 'Key Vault Secrets User' at a minimum to your Synapse workspace Managed Identity."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"public_key"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.identity import ManagedIdentityCredential\n",
					"from azure.keyvault.secrets import SecretClient\n",
					"\n",
					"key_vault_name = \"demo-kv-marcin\"\n",
					"\n",
					"def encrypt_dummy_file(gpg):\n",
					"\n",
					"    # Fetch public key\n",
					"    public_key = mssparkutils.credentials.getSecret(key_vault_name, \"pgp-public-key\")\n",
					"    public_key = public_key.replace('\\\\n', '\\n')\n",
					"\n",
					"    # Import the public key\n",
					"    import_result = gpg.import_keys(public_key)\n",
					"    public_key_id = import_result.fingerprints[0]\n",
					"\n",
					"    # Generate a dummy file\n",
					"    dummy_file_content = \"This is a dummy file for encryption.\"\n",
					"    dummy_file_path = 'dummy_file.txt'\n",
					"    \n",
					"    with open(dummy_file_path, 'w') as dummy_file:\n",
					"        dummy_file.write(dummy_file_content)\n",
					"    \n",
					"    # Read the dummy file content as a string\n",
					"    with open(dummy_file_path, 'r') as dummy_file:\n",
					"        file_content = dummy_file.read()\n",
					"\n",
					"    # Encrypt the dummy file content\n",
					"    encrypted_data = gpg.encrypt(file_content, recipients=public_key_id, always_trust=True)\n",
					"    \n",
					"    if encrypted_data.ok:\n",
					"        # Save the encrypted file content\n",
					"        encrypted_file_path = 'dummy_file.txt.gpg'\n",
					"        with open(encrypted_file_path, 'wb') as encrypted_file:\n",
					"            encrypted_file.write(encrypted_data.data)\n",
					"        print(f\"File encrypted and saved to {encrypted_file_path}\")\n",
					"    else:\n",
					"        print(\"Encryption failed:\", encrypted_data.status)\n",
					""
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"encrypt_dummy_file(gpg)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!ls -l | grep \".gpg\""
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}